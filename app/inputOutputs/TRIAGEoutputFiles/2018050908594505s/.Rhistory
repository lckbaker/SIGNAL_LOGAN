colnames(FreeThrowAttempts) <- Seasons
rownames(FreeThrowAttempts) <- Players
# Plot function
myplot <- function(data, rows=1:10){
Data <- data[rows,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players[rows], col=c(1:4,6), pch=15:18)
}
myplot(FreeThrows)
myplot(Salary, 1:2)
myplot(FreeThrows)
myplot(FreeThrowAttempts)
myplot(FreeThrows/Games)
myplot(FreeThrows/FreeThrowAttempts)
myplot((Points - FreeThrows)/(FieldGoals - FreeThrows))
myplot((Points - FreeThrows)/FieldGoals)
plot(runif.acomp(10,3))
plot(runif.acomp(10,3))
library(composition)
plot(runif.acomp(10,3))
library(compositions)
plot(runif.acomp(10,3))
u <- runif(3)
u
V <- runif(100, 1, 5)
hist(V)
V <- runif(100, 1, 5)
hist(V)
V <- runif(100, 1, 5)
hist(V)
V <- runif(100, 1, 5)
hist(V)
V <- runif(100, 1, 5)
hist(V)
V <- runif(100, 1, 5)
hist(V)
library(RTricks)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Desktop/Udemy_DataScience")
Data <- read_csv("DemographicData.csv")
head(Data)
setwd("~/Desktop/Udemy_DataScience")
stats<- read_csv("DemographicData.csv")
head(stats)
matrix[1,, drop=F]
filter <- stats$Internet.users < 2
stats[filter, ]
setwd("~/Desktop/Udemy_DataScience")
stats<- read_csv("DemographicData.csv")
head(stats)
# matrix[1,, drop=F]
# df[,1, drop=F]
head(stats)
setwd("~/Desktop/Udemy_DataScience")
stats<- read.csv("DemographicData.csv")
head(stats)
filter <- stats$Internet.users < 2
stats[filter, ]
stats[stats$Birth.rate > 40 & stats$Internet.users > 20]
stats[stats$Birth.rate > 40 & stats$Internet.users > 20,]
library(readr)
library(data.table)
setwd(“~/Desktop/Udemy_DataScience”)
setwd("~/Desktop/Udemy_DataScience")
pt<-proc.time()
data<-read.csv(“GPL570-GPL96-GPL1261-GPL1355TermGeneZScores-MGI_MF_CC_RT_IW_BP_KEGG_z_z.binary.Coexpression”)
data<-read.csv("GPL570-GPL96-GPL1261-GPL1355TermGeneZScores-MGI_MF_CC_RT_IW_BP_KEGG_z_z.binary.Coexpression")
data<-read.csv("GPL570-GPL96-GPL1261-GPL1355TermGeneZScores-MGI_MF_CC_RT_IW_BP_KEGG_z_z.binary.Coexpression.dat")
to.read = file("https://stats.idre.ucla.edu/stat/r/faq/bintest.dat", "rb")
readBin(to.read, integer(), endian = "little")
to.read = file("https://stats.idre.ucla.edu/stat/r/faq/bintest.dat", "rb")
#readBin(to.read, integer(), endian = "little")
readBin(to.read, character(), n=3)
to.read = file("https://stats.idre.ucla.edu/stat/r/faq/bintest.dat", "rb")
#readBin(to.read, integer(), endian = "little")
readBin(to.read, integer(), n=10)
to.read = file("https://stats.idre.ucla.edu/stat/r/faq/bintest.dat", "rb")
#readBin(to.read, integer(), endian = "little")
readBin(to.read, integer(), endian = "little")
varnames
readBin(to.read, character())
readBin(to.read, character(),  n=3)
newdata = file("https://stats.idre.ucla.edu/stat/r/faq/bindata.dat", "rb")
readBin(newdata, character(),  n=3)
readBin(to.read, integer(), endian = "little")
readBin(to.read, character(), n=3)
readBin(newdata, character(),  n=3)
readBin(newdata, character(),  n=3)
to.read = file("https://stats.idre.ucla.edu/stat/r/faq/bintest.dat", "rb")
#readBin(to.read, integer(), endian = "little")
readBin(to.read, character(), n=3)
newdata = file("https://stats.idre.ucla.edu/stat/r/faq/bindata.dat", "rb")
readBin(newdata, character(),  n=3)
newdata = file("https://stats.idre.ucla.edu/stat/r/faq/bindata.dat", "rb")
readBin(newdata, character(),  n=3)
to.read = file("https://stats.idre.ucla.edu/stat/r/faq/bintest.dat", "rb")
#readBin(to.read, integer(), endian = "little")
readBin(to.read, character(), n=3)
newdata = file("https://stats.idre.ucla.edu/stat/r/faq/bintest.dat", "rb")
readBin(newdata, character(),  n=3)
newdata = file("https://stats.idre.ucla.edu/stat/r/faq/bintest.dat", "rb")
readBin(newdata, character(),  n=3)
newdata = file("https://stats.idre.ucla.edu/stat/r/faq/bindata.dat", "rb")
readBin(newdata, character(),  n=3)
newdata = file("https://stats.idre.ucla.edu/stat/r/faq/bindata.dat", "rb")
readBin(newdata, character(),  n=3)
newdata = file("https://stats.idre.ucla.edu/stat/r/faq/bintest.dat", "rb")
readBin(newdata, character(),  n=3)
newdata = file("https://stats.idre.ucla.edu/stat/r/faq/bintest.dat", "rb")
readBin(newdata, character(),  n=3)
newdata = file("https://stats.idre.ucla.edu/stat/r/faq/bindata.dat", "rb")
readBin(newdata, character(),  n=3)
to.read = file("GPL570-GPL96-GPL1261-GPL1355TermGeneZScores-MGI_MF_CC_RT_IW_BP_KEGG_z_z.binary.Coexpression.dat", "rb")
#readBin(to.read, integer(), endian = "little")
readBin(to.read, character(), n=3)
to.read = file("GPL570-GPL96-GPL1261-GPL1355TermGeneZScores-MGI_MF_CC_RT_IW_BP_KEGG_z_z.binary.Coexpression.dat", "rb")
#readBin(to.read, integer(), endian = "little")
readBin(to.read, integer(), n=3)
readBin(to.read, integer())
readBin(to.read, integer(), n=10)
readBin(to.read, character(), n=10)
readBin(to.read, integer(), n=10)
readBin(to.read, integer(), n=10)
readBin(to.read, integer())
readBin(to.read, integer(), n=100)
shiny::runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
IAM <- filter(HuTNFanno, (Zscore < InflectionPoint & KEGGdb == "Absent" & CSAdes == "HitbyCSA" & get(IAM_final_iteration, envir = as.environment(HuTNFanno)) != 1)
| get(IAM_final_iteration, envir = as.environment(HuTNFanno)) == 1
| EntrezID %in% TLRpathway.genes.matrix
| EntrezID %in% PROTpathway.genes.matrix        # I commented out the protein pathway here and below but it can be commented back in.
| EntrezID %in% SPLICEpathway.genes.matrix)
runApp('TRIAGE/app')
runApp('TRIAGE/app')
?select
runApp('TRIAGE/app')
shiny::runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
shiny::runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
shiny::runApp('TRIAGE/app')
runApp('TRIAGE/app')
shiny::runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
shiny::runApp('TRIAGE/app')
?gc()
runApp('TRIAGE/app')
runApp('TRIAGE/app')
shiny::runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
?file.remove
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
?list.files()
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE_508/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
shiny::runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
shiny::runApp('TRIAGE/app')
SPLICEpathway.genes <- filter(KEGGmouse, PathwayName == path3_name)
runApp('TRIAGE/app')
runApp('TRIAGE/app')
if (tolower(organism) == "human"){
# setwd(KEGGdir)
pathwayFile <- c(paste0(dataDir, "Pathways/KEGGHuman.csv"))
message(pathwayFile)
#KEGGhuman <- read.csv("KEGGHuman.csv", stringsAsFactors = F)
KEGGhuman <- read.csv(file=pathwayFile, stringsAsFactors = F)
#Get Matrix of genes for each pathway in KEGG                    # Putting the list of gene EntrezID for each pathway of interest into a matrix
#Get TLR Canonical Genes
#TLRpathway.genes.matrix <- matrix(na.omit(Ian.tlr.canon$Human.EntrezGene.ID))
path1_name <<- sigPathways$Pathway[as.numeric(selectedRows[1])]
TLRpathway.genes <- filter(KEGGhuman, PathwayName == path1_name)
TLRpathway.genes.matrix <- matrix(TLRpathway.genes$EntrezID)
#PROTpathway.genes <- filter(KEGGhuman, PathwayName == "Proteasome")
path2_name <<- sigPathways$Pathway[as.numeric(selectedRows[2])]
PROTpathway.genes <- filter(KEGGhuman, PathwayName == path2_name)
PROTpathway.genes.matrix <- matrix(PROTpathway.genes$EntrezID)
#SPLICEpathway.genes <- filter(KEGGhuman, PathwayName == "Spliceosome")
path3_name <<- sigPathways$Pathway[as.numeric(selectedRows[3])]
SPLICEpathway.genes <- filter(KEGGhuman, PathwayName == path3_name)
SPLICEpathway.genes.matrix <- matrix(SPLICEpathway.genes$EntrezID)
}else if(tolower(organism) == "mouse"){
# setwd(KEGGdir)
pathwayFile <- c(paste0(dataDir, "Pathways/KEGGMouse.csv"))
message(pathwayFile)
#KEGGhuman <- read.csv("KEGGHuman.csv", stringsAsFactors = F)
KEGGmouse <- read.csv(file=pathwayFile, stringsAsFactors = F)
#Get Matrix of genes for each pathway in KEGG                    # Putting the list of gene EntrezID for each pathway of interest into a matrix
#Get TLR Canonical Genes
#TLRpathway.genes.matrix <- matrix(na.omit(Ian.tlr.canon$Human.EntrezGene.ID))
path1_name <<- sigPathways$Pathway[as.numeric(selectedRows[1])]
TLRpathway.genes <- filter(KEGGmouse, PathwayName == path1_name)
TLRpathway.genes.matrix <- matrix(TLRpathway.genes$EntrezID)
#PROTpathway.genes <- filter(KEGGhuman, PathwayName == "Proteasome")
path2_name <<- sigPathways$Pathway[as.numeric(selectedRows[2])]
PROTpathway.genes <- filter(KEGGmouse, PathwayName == path2_name)
PROTpathway.genes.matrix <- matrix(PROTpathway.genes$EntrezID)
#SPLICEpathway.genes <- filter(KEGGhuman, PathwayName == "Spliceosome")
path3_name <<- sigPathways$Pathway[as.numeric(selectedRows[3])]
SPLICEpathway.genes <- filter(KEGGmouse, PathwayName == path3_name)
SPLICEpathway.genes.matrix <- matrix(SPLICEpathway.genes$EntrezID)
}
runApp('TRIAGE/app')
ui <- bootstrapPage(
h3("URL components"),
verbatimTextOutput("urlText"),
h3("Parsed query string"),
verbatimTextOutput("queryText")
)
server <- function(input, output, session) {
# Return the components of the URL in a string:
output$urlText <- renderText({
paste(sep = "",
"protocol: ", session$clientData$url_protocol, "\n",
"hostname: ", session$clientData$url_hostname, "\n",
"pathname: ", session$clientData$url_pathname, "\n",
"port: ",     session$clientData$url_port,     "\n",
"search: ",   session$clientData$url_search,   "\n"
)
})
# Parse the GET query string
output$queryText <- renderText({
query <- parseQueryString(session$clientData$url_search)
ui <- bootstrapPage(
h3("URL components"),
verbatimTextOutput("urlText"),
h3("Parsed query string"),
verbatimTextOutput("queryText")
)
server <- function(input, output, session) {
# Return the components of the URL in a string:
output$urlText <- renderText({
paste(sep = "",
"protocol: ", session$clientData$url_protocol, "\n",
"hostname: ", session$clientData$url_hostname, "\n",
"pathname: ", session$clientData$url_pathname, "\n",
"port: ",     session$clientData$url_port,     "\n",
"search: ",   session$clientData$url_search,   "\n"
)
})
# Parse the GET query string
output$queryText <- renderText({
query <- parseQueryString(session$clientData$url_search)
# Return a string with key-value pairs
paste(names(query), query, sep = "=", collapse=", ")
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
h3("URL components"),
verbatimTextOutput("urlText"),
h3("Parsed query string"),
verbatimTextOutput("queryText")
)
server <- function(input, output, session) {
# Return the components of the URL in a string:
output$urlText <- renderText({
paste(sep = "",
"protocol: ", session$clientData$url_protocol, "\n",
"hostname: ", session$clientData$url_hostname, "\n",
"pathname: ", session$clientData$url_pathname, "\n",
"port: ",     session$clientData$url_port,     "\n",
"search: ",   session$clientData$url_search,   "\n"
)
})
# Parse the GET query string
output$queryText <- renderText({
query <- parseQueryString(session$clientData$url_search)
# Return a string with key-value pairs
paste(names(query), query, sep = "=", collapse=", ")
})
}
shinyApp(ui, server)
runApp('Desktop/session.R')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
shiny::runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
?strsplit
?unlist
updateR()
update()
install.packages(ggrepel)
install.packages("ggrepel"
)
?read.table
install.packages("dplyr")
install.packages("dplyr")
library("dplyr", lib.loc="~/Library/R/3.4/library")
library("DESeq2", lib.loc="~/Library/R/3.4/library")
library("BiocParallel", lib.loc="~/Library/R/3.4/library")
?bind_rows
?strsplit
shiny::runApp('TRIAGE/app')
shiny::runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
