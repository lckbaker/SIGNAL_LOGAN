SubGraph <- induced.subgraph(G,Subset_Genes.for.network.analysis)
if(tolower(use.only.commnected.components) == "yes"){
SubGraph <- induced.subgraph(SubGraph,names(which(degree(SubGraph) > 0)))
}
GraphEdgesHitPeripheralNames <- get.data.frame(SubGraph, what = "edges")
indRemove <- intersect(which((GraphEdgesHitPeripheralNames$from %in% gNames) == FALSE),
which((GraphEdgesHitPeripheralNames$to %in% gNames) == FALSE))
if(length(indRemove) > 0){
GraphEdgesHitPeripheralNames <- GraphEdgesHitPeripheralNames[-indRemove, ]
}
SubGraph <- graph.data.frame(GraphEdgesHitPeripheralNames, directed = FALSE, vertices = NULL)
#############################################################
#                  Create Subgraph with New Genes
#############################################################
Temp.Articulation <- V(SubGraph)$name[articulation.points(SubGraph)]
Articulation <- rep(0, length(V(SubGraph)$name))
Articulation[match(Temp.Articulation,(V(SubGraph)$name))] <- 1
gNames2 <- V(SubGraph)$name
ScreenHit <- rep("No", length(gNames2))
ScreenHit[match(gNames, gNames2)] <- "Yes"
indPeripheralGenes <- match(PeripheralGenesSelected, gNames2)
selected.gNames2 <- gNames2[indPeripheralGenes]
}
runApp('TRIAGE')
shiny::runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
?source
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
shiny::runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
?datatable
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
?cat
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
install.packages(pathview)
library(pathview)
biocLite("pathview")
source("http://bioconductor.org/biocLite.R")
biocLite("pathview")
library(pathview)
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
library(shiny)
library(DT)
shinyUI(
mainPanel(
DT::dataTableOutput("tbl")
)
)
shinyServer(function(input, output,session) {
output$tbl = DT::renderDataTable(
datatable(iris[1:5, ], callback = JS("
var tips = ['First row name', 'Second row name', 'Third row name',
'Fourth row name', 'Fifth row name'],
firstColumn = $('#tbl tr td:first-child');
for (var i = 0; i < tips.length; i++) {
$(firstColumn[i]).attr('title', tips[i]);
}")), server = FALSE)
})
shinyApp(ui = shinyUI, server = shinyServer)
library(shiny)
library(DT)
shinyUI(
mainPanel(
DT::dataTableOutput("tbl")
)
)
shinyServer(function(input, output,session) {
columnLabels <- paste0("label", 1:6)
DT::datatable(
tdata[1:5,],
options = list(paging = FALSE, searching = FALSE, info = FALSE, sort = FALSE,
columnDefs=list(list(targets=1:4, class="dt-right")) ),
rownames = paste("rowname",1:5),
container = htmltools::withTags(table(
class = 'display',
thead(
#tags$th(title=active_columns[i], colnames(data)[i])
tr(apply(data.frame(colnames=c('ratios','name1', 'name2', 'name3','name4','name5'), labels=columnLabels), 1,
function(x) th(title=x[2], x[1])))
)
))
)
})
}
shinyApp(ui = shinyUI, server = shinyServer)
library(shiny)
library(DT)
shinyUI(
mainPanel(
DT::dataTableOutput("tbl")
)
)
shinyServer(function(input, output,session) {
columnLabels <- paste0("label", 1:6)
DT::datatable(
tdata[1:5,],
options = list(paging = FALSE, searching = FALSE, info = FALSE, sort = FALSE,
columnDefs=list(list(targets=1:4, class="dt-right")) ),
rownames = paste("rowname",1:5),
container = htmltools::withTags(table(
class = 'display',
thead(
#tags$th(title=active_columns[i], colnames(data)[i])
tr(apply(data.frame(colnames=c('ratios','name1', 'name2', 'name3','name4','name5'), labels=columnLabels), 1,
function(x) th(title=x[2], x[1])))
)
))
)
})
}
shinyApp(ui = shinyUI, server = shinyServer)
? thead
??thead
library(shiny)
library(DT)
shinyUI(
mainPanel(
DT::dataTableOutput("tbl")
)
)
shinyServer(function(input, output,session) {
columnLabels <- paste0("label", 1:6)
DT::datatable(
tdata[1:5,],
options = list(paging = FALSE, searching = FALSE, info = FALSE, sort = FALSE,
columnDefs=list(list(targets=1:4, class="dt-right")) ),
rownames = paste("rowname",1:5),
container = htmltools::withTags(table(
class = 'display',
thead(
#tags$th(title=active_columns[i], colnames(data)[i])
tr(apply(data.frame(colnames=c('ratios','name1', 'name2', 'name3','name4','name5'), labels=columnLabels), 1,
function(x) th(title=x[2], x[1])))
)
))
)
})
}
shinyApp(ui = shinyUI, server = shinyServer)
library(shiny)
library(DT)
shinyUI(
mainPanel(
DT::dataTableOutput("tbl")
)
)
shinyServer(function(input, output,session) {
output$tbl = DT::renderDataTable(
datatable(iris[1:5, ], callback = JS("
var tips = ['First row name', 'Second row name', 'Third row name',
'Fourth row name', 'Fifth row name'],
firstColumn = $('#tbl tr td:first-child');
for (var i = 0; i < tips.length; i++) {
$(firstColumn[i]).attr('title', tips[i]);
}")), server = FALSE)
})
shinyApp(ui = shinyUI, server = shinyServer)
library(shiny)
library(DT)
if (interactive()) {
shinyUI(
mainPanel(
DT::dataTableOutput("tbl")
)
)
shinyServer(function(input, output,session) {
output$tbl = DT::renderDataTable(
datatable(iris[1:5, ], callback = JS("
var tips = ['First row name', 'Second row name', 'Third row name',
'Fourth row name', 'Fifth row name'],
firstColumn = $('#tbl tr td:first-child');
for (var i = 0; i < tips.length; i++) {
$(firstColumn[i]).attr('title', tips[i]);
}")), server = FALSE)
})
shinyApp(ui = shinyUI, server = shinyServer)
}
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
library(shiny)
library(DT)
shinyApp(
ui = fluidPage(
DT::dataTableOutput("table2")
),
server = function(input, output) {
output$table2<-DT::renderDataTable({
responseDataFilter2_home<-iris[,c(4,3,1)]
displayableData<-as.data.frame(responseDataFilter2_home, stringAsFactors = FALSe, row.names = NULL)
},server = TRUE, selection = 'single',callback = JS("table.on('dblclick.dt', 'td', function(nRow, aData){
var row=table.cell(this).index().row;
var full_text = aData[1] + ','+ aData[2]
$('td:eq(1)', nRow).attr('title', full_text);
Shiny.onInputChange('rows_home',[row, Math.random()]);});
table.on('click.dt', 'td', function(nRow, aData) {
var k=table.cell(this).index().row;
var full_text = aData[1] + ','+ aData[2]
$('td:eq(1)', nRow).attr('title', full_text);
if(table.rows('.selected').indexes().toArray()!= '' && table.rows('.selected').indexes().toArray() ==k){
k=-1;}
Shiny.onInputChange('rows_up_home',[k, Math.random()]);
});"),
escape=FALSE,options=list(paging=FALSE,searching = FALSE,ordering=FALSE,scrollY = 400,scrollCollapse=TRUE,
columnDefs = list(list(width = '800%', targets = c(1)))),rownames=FALSE,colnames="Name")
}
)
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
?renderDataTable
?renderDataTable
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
function doPost(url, type, body) {
newWindow = window.open("", url);
ajax = new XMLHttpRequest();
ajax.open("POST", url, true);
ajax.setRequestHeader("Content-type", "text/plain");
ajax.setRequestHeader("Accept", type);
ajax.onreadystatechange = function() {
if(ajax.readyState == 4 && ajax.status == 200) {
text = ajax.responseText.replace(/</g, "&lt;");
text = text.replace(/>/g, "&gt;");
newWindow.document.write("<pre>" + text + "</pre>");
newWindow.document.close();
}
};
ajax.send(body);
}
function listByQuery(type) {
url = "/ReactomeRESTfulAPI/RESTfulWS/listByQuery/Pathway";
body = "name=Apoptosis";
doPost(url, type, body);
}
function queryByIds(type) {
url = "/ReactomeRESTfulAPI/RESTfulWS/queryByIds/Pathway";
body = "ID=109607,109606,75153,169911";
doPost(url, type, body);
}
function doPost(url, type, body) {
newWindow = window.open("", url);
ajax = new XMLHttpRequest();
ajax.open("POST", url, true);
ajax.setRequestHeader("Content-type", "text/plain");
ajax.setRequestHeader("Accept", type);
ajax.onreadystatechange = function() {
if(ajax.readyState == 4 && ajax.status == 200) {
text = ajax.responseText.replace(/</g, "&lt;");
text = text.replace(/>/g, "&gt;");
newWindow.document.write("<pre>" + text + "</pre>");
newWindow.document.close();
}
};
ajax.send(body);
}
function listByQuery(type) {
url = "/ReactomeRESTfulAPI/RESTfulWS/listByQuery/Pathway";
body = "name=Apoptosis";
doPost(url, type, body);
}
function pathwaysForEntities(type) {
url = "/ReactomeRESTfulAPI/RESTfulWS/pathwaysForEntities";
body="ID=170075,176374,68557";
doPost(url, type, body);
}
function queryHitPathways(type) {
url = "/ReactomeRESTfulAPI/RESTfulWS/queryHitPathways";
body="PPP2R1A,CEP192,AKAP9,CENPJ,CEP290,DYNC1H1";
doPost(url, type, body);
}
shiny::runApp('TRIAGE/app')
non.hits <- intersect(non.hits,pathway$EntrezID)
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
hits <- intersect(hits,pathway$EntrezID)
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
