runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
runApp('TRIAGE')
function doPost(url, type, body) {
newWindow = window.open("", url);
ajax = new XMLHttpRequest();
ajax.open("POST", url, true);
ajax.setRequestHeader("Content-type", "text/plain");
ajax.setRequestHeader("Accept", type);
ajax.onreadystatechange = function() {
if(ajax.readyState == 4 && ajax.status == 200) {
text = ajax.responseText.replace(/</g, "&lt;");
text = text.replace(/>/g, "&gt;");
newWindow.document.write("<pre>" + text + "</pre>");
newWindow.document.close();
}
};
ajax.send(body);
}
function listByQuery(type) {
url = "/ReactomeRESTfulAPI/RESTfulWS/listByQuery/Pathway";
body = "name=Apoptosis";
doPost(url, type, body);
}
function queryByIds(type) {
url = "/ReactomeRESTfulAPI/RESTfulWS/queryByIds/Pathway";
body = "ID=109607,109606,75153,169911";
doPost(url, type, body);
}
function doPost(url, type, body) {
newWindow = window.open("", url);
ajax = new XMLHttpRequest();
ajax.open("POST", url, true);
ajax.setRequestHeader("Content-type", "text/plain");
ajax.setRequestHeader("Accept", type);
ajax.onreadystatechange = function() {
if(ajax.readyState == 4 && ajax.status == 200) {
text = ajax.responseText.replace(/</g, "&lt;");
text = text.replace(/>/g, "&gt;");
newWindow.document.write("<pre>" + text + "</pre>");
newWindow.document.close();
}
};
ajax.send(body);
}
function listByQuery(type) {
url = "/ReactomeRESTfulAPI/RESTfulWS/listByQuery/Pathway";
body = "name=Apoptosis";
doPost(url, type, body);
}
function pathwaysForEntities(type) {
url = "/ReactomeRESTfulAPI/RESTfulWS/pathwaysForEntities";
body="ID=170075,176374,68557";
doPost(url, type, body);
}
function queryHitPathways(type) {
url = "/ReactomeRESTfulAPI/RESTfulWS/queryHitPathways";
body="PPP2R1A,CEP192,AKAP9,CENPJ,CEP290,DYNC1H1";
doPost(url, type, body);
}
shiny::runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
shinyedge(g)
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Desktop/Iain/Mike_RNAseq_data/")
library(readr)
suppressMessages(library(dplyr))
DorringtonIFNbRunA_counts <- read.table("DorringtonIFNbRunA_counts.tab", header = FALSE, row.names = 1, sep=" ", quote = "\"")
DorringtonIFNbRunB_counts <- read.table("DorringtonIFNbRunB_counts.tab", header = FALSE, row.names = 1, sep=" ", quote = "\"")
# Remove the first three rows
DorringtonIFNbRunA_counts <- DorringtonIFNbRunA_counts[-c(1,2,3,4),]
DorringtonIFNbRunB_counts <- DorringtonIFNbRunB_counts[-c(1,2,3,4),]
#head(DorringtonIFNbRunA_counts)
# Add column names to the dataframes
columns <- scan("DorringtonIFNbRunA_samplenames.txt", what="", sep="\n")
colnames(DorringtonIFNbRunA_counts) <- c(columns)
colnames(DorringtonIFNbRunB_counts) <- c(columns)
# Merge the two datasets by sum
library(abind)
temp_array <- abind(DorringtonIFNbRunA_counts, DorringtonIFNbRunB_counts, along=3)
DorringtonIFNbRunAB_counts <- apply(temp_array, 1:2, sum)
#head(DorringtonIFNbRunAB_counts)
# Then average the sum of the two counts and round up the average counts
countData <- ceiling(DorringtonIFNbRunAB_counts[,1:24]/2)
#head(countData)
# Save the merge datasets into a file
write.table(DorringtonIFNbRunAB_counts, file="DorringtonIFNbRunABmerged_counts.txt", sep = "\t", quote = FALSE, row.names=FALSE)
# load libraries
library("BiocParallel")
suppressMessages(library("DESeq2"))
# Ask for 8 cores for parallel processing
register(MulticoreParam(8))
# Pre-filtering the dataset
countData <- countData[(rowSums(countData)>1),]
# Create DEseq object and run DEseq2
condition <- factor(c(rep("Knockout", 12), rep("Wildtype", 12)))
colData <- data.frame(row.names=colnames(countData), condition)
ddsMat <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ condition)
dds=DESeq(ddsMat, parallel = TRUE)
save(dds, file = "RNAseqddsObj.Rdata")
dim(dds)
rownames(dds)
resultsNames(dds)
# Regularized-logarithm transformation or rlog
rld <- rlog(dds, blind = FALSE)
head(assay(rld), 3)
# Variance stabilizing transformation (VST)
vsd <- vst(dds, blind = FALSE)
head(assay(vsd), 3)
# To show the effect of the transformation
library("ggplot2")
dds <- estimateSizeFactors(dds)
df <- bind_rows(
as_data_frame(log2(counts(dds, normalized=TRUE)[, 1:13]+1)) %>%
mutate(transformation = "log2(x + 1)"),
as_data_frame(assay(rld)[, 1:13]) %>% mutate(transformation = "rlog"),
as_data_frame(assay(vsd)[, 1:13]) %>% mutate(transformation = "vst"))
shiny::runApp('TRIAGE/app')
?rnorm
n <- 100
rnorm(n, mean = 0, sd = 1)
n <- 100
total <- sum(rnorm(n, mean = 0, sd = 1))
avg <- total/n
n <- 100
total <- sum(rnorm(n, mean = 0, sd = 1))
avg <- total/n
avg
n <- 1000
total <- sum(rnorm(n, mean = 0, sd = 1))
avg <- total/n
avg
n <- 10000
n <- 10000
total <- sum(rnorm(n, mean = 0, sd = 1))
avg <- total/n
avg
rnorm(n, mean = 0, sd = 1)
n <- 10000
total <- rnorm(n, mean = 0, sd = 1))
class(total)
n <- 10000
total <- rnorm(n, mean = 0, sd = 1))
typeof(total)
n <- 10000
total <- rnorm(n, mean = 0, sd = 1))
total
n <- 10000
total <- rnorm(n, mean = 0, sd = 1))
total
n <- 10000
total <- rnorm(n, mean = 0, sd = 1)
total
n <- 10000
total <- rnorm(n, mean = 0, sd = 1)
class(total)
n <- 10000
total <- rnorm(n, mean = 0, sd = 1)
length(total)
n <- 10000
total <- rnorm(n, mean = 0, sd = 1)
length(total > -1 & total < 1)
n <- 10000
total <- rnorm(n, mean = 0, sd = 1)
sum(total > -1 & total < 1)/n
n <- 100000
n <- 100000
total <- rnorm(n, mean = 0, sd = 1)
sum(total > -1 & total < 1)/n
n <- 10000000
n <- 10000000
total <- rnorm(n, mean = 0, sd = 1)
sum(total > -1 & total < 1)/n
n <- 10000000
total <- rnorm(n, mean = 0, sd = 1)
sum(total > -1 & total < 1)/n
n <- 100000
n <- 100000
total <- rnorm(n, mean = 0, sd = 1)
sum(total > -1 & total < 1)/n
n <- 10000
total <- rnorm(n, mean = 0, sd = 1)
sum(total > -1 & total < 1)/n
n <- 1000
total <- rnorm(n, mean = 0, sd = 1)
sum(total > -1 & total < 1)/n
n <- 10
n <- 10
total <- rnorm(n, mean = 0, sd = 1)
sum(total > -1 & total < 1)/n
n <- 1000
n <- 1000
total <- rnorm(n, mean = 0, sd = 1)
sum(total > -1 & total < 1)/n
n <- 100000
n <- 100000
total <- rnorm(n, mean = 0, sd = 1)
sum(total > -1 & total < 1)/n
n <- 10000000
total <- rnorm(n, mean = 0, sd = 1)
sum(total > -1 & total < 1)/n
n <- 1000000000
total <- rnorm(n, mean = 0, sd = 1)
sum(total > -1 & total < 1)/n
N <- 1000
counter <- 0
for(i in rnorm(N, mean =0, sd = 2)){
if(i > -1 & i<1)
{
counter <- counter + 1
}
}
answer <- counter / N
answer
N <- 1000
counter <- 0
for(i in rnorm(N, mean =0, sd = 1)){
if(i > -1 & i<1)
{
counter <- counter + 1
}
}
answer <- counter / N
answer
N <- 100000
counter <- 0
for(i in rnorm(N, mean =0, sd = 1)){
if(i > -1 & i<1)
{
counter <- counter + 1
}
}
answer <- counter / N
answer
N <- 10000000
counter <- 0
for(i in rnorm(N, mean =0, sd = 1)){
if(i > -1 & i<1)
{
counter <- counter + 1
}
}
answer <- counter / N
answer
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
library(shiny)
ui <- pageWithSidebar(
headerPanel("fill this and send"),
sidebarPanel(
),
mainPanel(
textInput("name", "Name:", ""),
textInput("body", "Body:", ""),
actionButton("goButton",label = "Send this")
)
)
server <- function(input, output) {
observe({
# Take a dependency on input$goButton
if (input$goButton == 0)
return(NULL)
# Use isolate() to avoid dependency on input$goButton
isolate({
info <- data.frame(subject=paste("New info from:",input$name),
body = info$body)
InfromMe(info)
})
})
}
runApp(list(ui=ui,server=server))
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
library(shiny)
ui <- pageWithSidebar(
headerPanel("fill this and send"),
sidebarPanel(
),
mainPanel(
textInput("name", "Name:", ""),
textInput("body", "Body:", ""),
actionButton("goButton",label = "Send this")
)
)
server <- function(input, output) {
observe({
# Take a dependency on input$goButton
if (input$goButton == 0)
return(NULL)
# Use isolate() to avoid dependency on input$goButton
isolate({
info <- data.frame(subject=paste("New info from:",input$name),
body = info$body)
InfromMe(info)
})
})
}
runApp(list(ui=ui,server=server))
runApp('TRIAGE/app')
runApp('TRIAGE/app')
install.packages("shinyAce")
runApp('TRIAGE/app')
install.packages("sendmailR")
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
install.packages(mailR)
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
library(mailR)
install.packages(mailR)
install.packages("mailr")
install.packages("mailR")
runApp('TRIAGE/app')
runApp('TRIAGE/app')
library(mailR)
install.packages("rJava")
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
## Only run examples in interactive R sessions
if (interactive()) {
# Show a message when button is clicked
shinyApp(
ui = fluidPage(
actionButton("show", "Show")
),
server = function(input, output) {
observeEvent(input$show, {
showNotification("Message text",
action = a(href = "javascript:location.reload();", "Reload page")
)
})
}
)
# App with show and remove buttons
shinyApp(
ui = fluidPage(
actionButton("show", "Show"),
actionButton("remove", "Remove")
),
server = function(input, output) {
# A queue of notification IDs
ids <- character(0)
# A counter
n <- 0
observeEvent(input$show, {
# Save the ID for removal later
id <- showNotification(paste("Message", n), duration = NULL)
ids <<- c(ids, id)
n <<- n + 1
})
observeEvent(input$remove, {
if (length(ids) > 0)
removeNotification(ids[1])
ids <<- ids[-1]
})
}
)
}
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
shiny::runApp()
