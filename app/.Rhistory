write.table(DorringtonIFNbRunAB_counts, file="DorringtonIFNbRunABmerged_counts.txt", sep = "\t", quote = FALSE, row.names=FALSE)
# load libraries
library("BiocParallel")
suppressMessages(library("DESeq2"))
# Ask for 8 cores for parallel processing
register(MulticoreParam(8))
# Pre-filtering the dataset
countData <- countData[(rowSums(countData)>1),]
# Create DEseq object and run DEseq2
condition <- factor(c(rep("Knockout", 12), rep("Wildtype", 12)))
colData <- data.frame(row.names=colnames(countData), condition)
ddsMat <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ condition)
dds=DESeq(ddsMat, parallel = TRUE)
save(dds, file = "RNAseqddsObj.Rdata")
dim(dds)
rownames(dds)
resultsNames(dds)
# Regularized-logarithm transformation or rlog
rld <- rlog(dds, blind = FALSE)
head(assay(rld), 3)
# Variance stabilizing transformation (VST)
vsd <- vst(dds, blind = FALSE)
head(assay(vsd), 3)
# To show the effect of the transformation
library("ggplot2")
dds <- estimateSizeFactors(dds)
df <- bind_rows(
as_data_frame(log2(counts(dds, normalized=TRUE)[, 1:13]+1)) %>%
mutate(transformation = "log2(x + 1)"),
as_data_frame(assay(rld)[, 1:13]) %>% mutate(transformation = "rlog"),
as_data_frame(assay(vsd)[, 1:13]) %>% mutate(transformation = "vst"))
shiny::runApp('TRIAGE/app')
?rnorm
n <- 100
rnorm(n, mean = 0, sd = 1)
n <- 100
total <- sum(rnorm(n, mean = 0, sd = 1))
avg <- total/n
n <- 100
total <- sum(rnorm(n, mean = 0, sd = 1))
avg <- total/n
avg
n <- 1000
total <- sum(rnorm(n, mean = 0, sd = 1))
avg <- total/n
avg
n <- 10000
n <- 10000
total <- sum(rnorm(n, mean = 0, sd = 1))
avg <- total/n
avg
rnorm(n, mean = 0, sd = 1)
n <- 10000
total <- rnorm(n, mean = 0, sd = 1))
class(total)
n <- 10000
total <- rnorm(n, mean = 0, sd = 1))
typeof(total)
n <- 10000
total <- rnorm(n, mean = 0, sd = 1))
total
n <- 10000
total <- rnorm(n, mean = 0, sd = 1))
total
n <- 10000
total <- rnorm(n, mean = 0, sd = 1)
total
n <- 10000
total <- rnorm(n, mean = 0, sd = 1)
class(total)
n <- 10000
total <- rnorm(n, mean = 0, sd = 1)
length(total)
n <- 10000
total <- rnorm(n, mean = 0, sd = 1)
length(total > -1 & total < 1)
n <- 10000
total <- rnorm(n, mean = 0, sd = 1)
sum(total > -1 & total < 1)/n
n <- 100000
n <- 100000
total <- rnorm(n, mean = 0, sd = 1)
sum(total > -1 & total < 1)/n
n <- 10000000
n <- 10000000
total <- rnorm(n, mean = 0, sd = 1)
sum(total > -1 & total < 1)/n
n <- 10000000
total <- rnorm(n, mean = 0, sd = 1)
sum(total > -1 & total < 1)/n
n <- 100000
n <- 100000
total <- rnorm(n, mean = 0, sd = 1)
sum(total > -1 & total < 1)/n
n <- 10000
total <- rnorm(n, mean = 0, sd = 1)
sum(total > -1 & total < 1)/n
n <- 1000
total <- rnorm(n, mean = 0, sd = 1)
sum(total > -1 & total < 1)/n
n <- 10
n <- 10
total <- rnorm(n, mean = 0, sd = 1)
sum(total > -1 & total < 1)/n
n <- 1000
n <- 1000
total <- rnorm(n, mean = 0, sd = 1)
sum(total > -1 & total < 1)/n
n <- 100000
n <- 100000
total <- rnorm(n, mean = 0, sd = 1)
sum(total > -1 & total < 1)/n
n <- 10000000
total <- rnorm(n, mean = 0, sd = 1)
sum(total > -1 & total < 1)/n
n <- 1000000000
total <- rnorm(n, mean = 0, sd = 1)
sum(total > -1 & total < 1)/n
N <- 1000
counter <- 0
for(i in rnorm(N, mean =0, sd = 2)){
if(i > -1 & i<1)
{
counter <- counter + 1
}
}
answer <- counter / N
answer
N <- 1000
counter <- 0
for(i in rnorm(N, mean =0, sd = 1)){
if(i > -1 & i<1)
{
counter <- counter + 1
}
}
answer <- counter / N
answer
N <- 100000
counter <- 0
for(i in rnorm(N, mean =0, sd = 1)){
if(i > -1 & i<1)
{
counter <- counter + 1
}
}
answer <- counter / N
answer
N <- 10000000
counter <- 0
for(i in rnorm(N, mean =0, sd = 1)){
if(i > -1 & i<1)
{
counter <- counter + 1
}
}
answer <- counter / N
answer
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
library(shiny)
ui <- pageWithSidebar(
headerPanel("fill this and send"),
sidebarPanel(
),
mainPanel(
textInput("name", "Name:", ""),
textInput("body", "Body:", ""),
actionButton("goButton",label = "Send this")
)
)
server <- function(input, output) {
observe({
# Take a dependency on input$goButton
if (input$goButton == 0)
return(NULL)
# Use isolate() to avoid dependency on input$goButton
isolate({
info <- data.frame(subject=paste("New info from:",input$name),
body = info$body)
InfromMe(info)
})
})
}
runApp(list(ui=ui,server=server))
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
library(shiny)
ui <- pageWithSidebar(
headerPanel("fill this and send"),
sidebarPanel(
),
mainPanel(
textInput("name", "Name:", ""),
textInput("body", "Body:", ""),
actionButton("goButton",label = "Send this")
)
)
server <- function(input, output) {
observe({
# Take a dependency on input$goButton
if (input$goButton == 0)
return(NULL)
# Use isolate() to avoid dependency on input$goButton
isolate({
info <- data.frame(subject=paste("New info from:",input$name),
body = info$body)
InfromMe(info)
})
})
}
runApp(list(ui=ui,server=server))
runApp('TRIAGE/app')
runApp('TRIAGE/app')
install.packages("shinyAce")
runApp('TRIAGE/app')
install.packages("sendmailR")
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
install.packages(mailR)
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
library(mailR)
install.packages(mailR)
install.packages("mailr")
install.packages("mailR")
runApp('TRIAGE/app')
runApp('TRIAGE/app')
library(mailR)
install.packages("rJava")
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
## Only run examples in interactive R sessions
if (interactive()) {
# Show a message when button is clicked
shinyApp(
ui = fluidPage(
actionButton("show", "Show")
),
server = function(input, output) {
observeEvent(input$show, {
showNotification("Message text",
action = a(href = "javascript:location.reload();", "Reload page")
)
})
}
)
# App with show and remove buttons
shinyApp(
ui = fluidPage(
actionButton("show", "Show"),
actionButton("remove", "Remove")
),
server = function(input, output) {
# A queue of notification IDs
ids <- character(0)
# A counter
n <- 0
observeEvent(input$show, {
# Save the ID for removal later
id <- showNotification(paste("Message", n), duration = NULL)
ids <<- c(ids, id)
n <<- n + 1
})
observeEvent(input$remove, {
if (length(ids) > 0)
removeNotification(ids[1])
ids <<- ids[-1]
})
}
)
}
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
shiny::runApp()
runApp()
install.packages('shiny.BS')
install.packages('shinyBS')
library(shinyBS)
runApp()
install.packages('DT')
library(DT)
runApp()
install.packages('data.table')
runApp()
install.packages('igraph')
runApp()
library(igraph)
install.packages('igraph')
library(igraph)
install.packages('igraph', dependencies=T)
library(igraph)
install.packages('igraph', dependencies=T)
library(igraph)
runApp()
install.packages('edgebundleR')
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages = c('shinyAce', 'mailR', 'rJava', 'networkD3', 'visNetwork', 'org.Hs.eg.db', 'org.Mm.eg.db')
ipak(packages)
library(org.Hs.eg.db)
packages = c('AnnotationDbi', 'reshape2', 'tidyr', 'gridExtra', 'crosstalk', 'htmltools')
ipak(packages)
runApp()
library(shinyAce)
install.packages('shinyAce')
version
install.packages("installr")
shiny::runApp()
library(rJava)
install.packages('rJava', dependencies = TRUE)
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
library(rJava)
Version
version
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre7')
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
install.packages('rJava')
library(rJava)
install.packages('rJava', dependencies = )
install.packages('rJava', dependencies = T)
library(rJava)
library(rJava)
installed.packages()
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
.rs.restartR()
library(rJava)
install.packages('rJava')
library(rJava)
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detach("package:rJava", unload=TRUE)
install.packages("rJava",,"http://rforge.net/",type="source")
library(rJava)
.jinit()
.jcall("java/lang/System", "S", "getProperty", "java.runtime.version")
install.packages('rJava', type = 'source')
library(rJava)
JAVA_HOME
JAVA_HOME=`/usr/libexec/java_home`
JAVA_HOME='/usr/libexec/java_home'
library(rJava)
JAVA_HOME='//usr//libexec//java_home'
library(rJava)
?rJava
??rJava
Sys.setenv(JAVA_HOME = "/Library/Java/JavaVirtualMachines/1.6.0.jdk/")
library(rJava)
Sys.setenv(JAVA_HOME = "Library/Java/JavaVirtualMachines/1.6.0.jdk/")
library(rJava)
system("java -version")
library(rJava)
system("java -version")
system("java -version")
system("java -version")
install.packages(rJava)
install.packages('rJava')
library(rJava)
install.packages('rJava', dependencies = T)
library(rJava)
.rs.restartR()
library(rJava)
install.packages('rJava', dependencies = T)
library(rJava)
system('java -version')
.rs.restartR()
library(rJava)
install.packages(rJava)
install.packages('rJava')
library(rJava)
shiny::runApp()
library(rJava)
system('java -version')
options(java_home="/Library/Java/JavaVirtualMachines/jdk-11.0.2.jdk")
library(rJava)
Sys.setenv(DYLD_FALLBACK_LIBRARY_PATH="/Library/Java/JavaVirtualMachines/jdk-11.0.2.jdk/Contents/Home/jre/lib/server/")
library(rJava)
install.packages('rJava',,'http://www.rforge.net/')
library(rJava)
shiny::runApp()
Sys.getenv("DYLD_FALLBACK_LIBRARY_PATH")
Sys.getenv("DYLD_LIBRARY_PATH")
library(rJava)
