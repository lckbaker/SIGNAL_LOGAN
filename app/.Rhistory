}
answer <- counter / N
answer
N <- 10000000
counter <- 0
for(i in rnorm(N, mean =0, sd = 1)){
if(i > -1 & i<1)
{
counter <- counter + 1
}
}
answer <- counter / N
answer
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
library(shiny)
ui <- pageWithSidebar(
headerPanel("fill this and send"),
sidebarPanel(
),
mainPanel(
textInput("name", "Name:", ""),
textInput("body", "Body:", ""),
actionButton("goButton",label = "Send this")
)
)
server <- function(input, output) {
observe({
# Take a dependency on input$goButton
if (input$goButton == 0)
return(NULL)
# Use isolate() to avoid dependency on input$goButton
isolate({
info <- data.frame(subject=paste("New info from:",input$name),
body = info$body)
InfromMe(info)
})
})
}
runApp(list(ui=ui,server=server))
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
library(shiny)
ui <- pageWithSidebar(
headerPanel("fill this and send"),
sidebarPanel(
),
mainPanel(
textInput("name", "Name:", ""),
textInput("body", "Body:", ""),
actionButton("goButton",label = "Send this")
)
)
server <- function(input, output) {
observe({
# Take a dependency on input$goButton
if (input$goButton == 0)
return(NULL)
# Use isolate() to avoid dependency on input$goButton
isolate({
info <- data.frame(subject=paste("New info from:",input$name),
body = info$body)
InfromMe(info)
})
})
}
runApp(list(ui=ui,server=server))
runApp('TRIAGE/app')
runApp('TRIAGE/app')
install.packages("shinyAce")
runApp('TRIAGE/app')
install.packages("sendmailR")
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
install.packages(mailR)
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
library(mailR)
install.packages(mailR)
install.packages("mailr")
install.packages("mailR")
runApp('TRIAGE/app')
runApp('TRIAGE/app')
library(mailR)
install.packages("rJava")
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
## Only run examples in interactive R sessions
if (interactive()) {
# Show a message when button is clicked
shinyApp(
ui = fluidPage(
actionButton("show", "Show")
),
server = function(input, output) {
observeEvent(input$show, {
showNotification("Message text",
action = a(href = "javascript:location.reload();", "Reload page")
)
})
}
)
# App with show and remove buttons
shinyApp(
ui = fluidPage(
actionButton("show", "Show"),
actionButton("remove", "Remove")
),
server = function(input, output) {
# A queue of notification IDs
ids <- character(0)
# A counter
n <- 0
observeEvent(input$show, {
# Save the ID for removal later
id <- showNotification(paste("Message", n), duration = NULL)
ids <<- c(ids, id)
n <<- n + 1
})
observeEvent(input$remove, {
if (length(ids) > 0)
removeNotification(ids[1])
ids <<- ids[-1]
})
}
)
}
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
runApp('TRIAGE/app')
shiny::runApp()
runApp()
install.packages('shiny.BS')
install.packages('shinyBS')
library(shinyBS)
runApp()
install.packages('DT')
library(DT)
runApp()
install.packages('data.table')
runApp()
install.packages('igraph')
runApp()
library(igraph)
install.packages('igraph')
library(igraph)
install.packages('igraph', dependencies=T)
library(igraph)
install.packages('igraph', dependencies=T)
library(igraph)
runApp()
install.packages('edgebundleR')
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages = c('shinyAce', 'mailR', 'rJava', 'networkD3', 'visNetwork', 'org.Hs.eg.db', 'org.Mm.eg.db')
ipak(packages)
library(org.Hs.eg.db)
packages = c('AnnotationDbi', 'reshape2', 'tidyr', 'gridExtra', 'crosstalk', 'htmltools')
ipak(packages)
runApp()
library(shinyAce)
install.packages('shinyAce')
version
install.packages("installr")
shiny::runApp()
library(rJava)
install.packages('rJava', dependencies = TRUE)
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
library(rJava)
Version
version
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre7')
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
install.packages('rJava')
library(rJava)
install.packages('rJava', dependencies = )
install.packages('rJava', dependencies = T)
library(rJava)
library(rJava)
installed.packages()
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
.rs.restartR()
library(rJava)
install.packages('rJava')
library(rJava)
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detach("package:rJava", unload=TRUE)
install.packages("rJava",,"http://rforge.net/",type="source")
library(rJava)
.jinit()
.jcall("java/lang/System", "S", "getProperty", "java.runtime.version")
install.packages('rJava', type = 'source')
library(rJava)
JAVA_HOME
JAVA_HOME=`/usr/libexec/java_home`
JAVA_HOME='/usr/libexec/java_home'
library(rJava)
JAVA_HOME='//usr//libexec//java_home'
library(rJava)
?rJava
??rJava
Sys.setenv(JAVA_HOME = "/Library/Java/JavaVirtualMachines/1.6.0.jdk/")
library(rJava)
Sys.setenv(JAVA_HOME = "Library/Java/JavaVirtualMachines/1.6.0.jdk/")
library(rJava)
system("java -version")
library(rJava)
system("java -version")
system("java -version")
system("java -version")
install.packages(rJava)
install.packages('rJava')
library(rJava)
install.packages('rJava', dependencies = T)
library(rJava)
.rs.restartR()
library(rJava)
install.packages('rJava', dependencies = T)
library(rJava)
system('java -version')
.rs.restartR()
library(rJava)
install.packages(rJava)
install.packages('rJava')
library(rJava)
shiny::runApp()
library(rJava)
system('java -version')
options(java_home="/Library/Java/JavaVirtualMachines/jdk-11.0.2.jdk")
library(rJava)
Sys.setenv(DYLD_FALLBACK_LIBRARY_PATH="/Library/Java/JavaVirtualMachines/jdk-11.0.2.jdk/Contents/Home/jre/lib/server/")
library(rJava)
install.packages('rJava',,'http://www.rforge.net/')
library(rJava)
shiny::runApp()
Sys.getenv("DYLD_FALLBACK_LIBRARY_PATH")
Sys.getenv("DYLD_LIBRARY_PATH")
library(rJava)
shiny::runApp()
getwd()
Sys.setenv(HOME='/Users/kylewebb/Documents/')
runApp()
source('~/Documents/TRIAGE/app/Rscripts/config_jsons.R', echo=TRUE)
getwd()
# function to reclassify names as imports for two-way connection in network
#change_name <- function(x){names(x) = "imports"; return(x)}
#function to configure dataframes for each json value
change_form <- function(l, i, nodes){
key.name = gsub(".*\\.","",names(l[i]))
node.info = nodes[which(nodes$key == key.name),]
data.frame('name' = rep(names(l[i]), nrow(l[[i]])),
'imports' = l[[i]][,1],
'weights' = l[[i]][,2],
'datasource' = l[[i]][,3],
'Confidence' = rep(node.info$Confidence, nrow(l[[i]])))
#'Pathway' = rep(node.info$Pathway, nrow(l[[i]])))
}
# function to combine names of edge dataframe
join_str <- function(str1, str2, names){
c1 = substr(str1, 1, 1)
c2 = substr(str2, 1, 1)
val1 = as.numeric(c1)
val2 = as.numeric(c2)
st1 = substr(str1, 2, nchar(str1))
st2 = substr(str2, 2, nchar(str2))
if(val2 == 4){
if(val1 != 4){
c(paste0(names[val1], st1), paste0('Novel Genes', st2))
}
else{
c(paste0('Novel Genes', st1), paste0('Novel Genes', st2))
}
}
else{
c(paste0(names[val1], st1), paste0(names[val2], st2))
}
}
#function to assign correct path name variables
assign_names <- function(names, edges){
for(i in 1:nrow(edges)){
edges[i,1:2] = join_str(edges[i,1], edges[i,2], names)
}
return(edges)
}
#function to merge the two lists of names and imports by the same name
merge_lists <- function(l.1, l.2){
keys = unique(c(names(l.1), names(l.2)))
L = lapply(keys, function(key){
#print(key)
l.1.col = l.1[key][[1]]
l.2.col = l.2[key][[1]]
check = any(is.null(l.1.col), is.null(l.2.col))
if(!check){
rbind(l.1.col, l.2.col)
}
else{
w.full = ifelse(!is.null(l.1.col), 1, 2)
list(l.1.col, l.2.col)[[w.full]]
}
})
names(L) = keys
return(L)
}
conf.f = function(x){
x = substr(x, 1, nchar(x)-4)
x = ifelse(x=='Med', 'Medium', x)
return(x)
}
config_df <- function(nodes, edges, dimNames){
#fix values of confidence levels
nodes$Confidence = conf.f(nodes$Confidence)
#assigns correct names of network pathways selected
edges = assign_names(dimNames, edges)
# change names of from and to to name and imports
colnames(edges)[1:2] = c('name', 'imports')
# creates a larger list designating level 1 node connection to all other nodes
group1 = lapply(split(edges, edges$name), `[`, 2:ncol(edges))
group2 = lapply(split(edges, edges$imports), `[`, c(1,3:ncol(edges)))
group2 = lapply(group2, setNames, c('imports', 'weights', 'datasource')) #, 'keggConf', 'netConf', 'Pathway'))
L = merge_lists(group1, group2)
# json formation and output from list of dataframes
df_L = list()
for(i in 1:length(L)){df_L = append(df_L, list(change_form(L, i, nodes)))}
return(df_L)
}
config_json <- function(nodes, edges, dimNames){
df_L = config_df(nodes, edges, dimNames)
json = jsonlite::toJSON(df_L, 'columns')
return(json)
}
config_json2 <- function(nodes1, edges1, nodes2, edges2, dimNames){
df1 = config_df(nodes1, edges1, dimNames)
df2 = config_df(nodes2, edges2, dimNames)
df_full = list(df1, df2)
#df_full = df_full[-which(duplicated(df_full))]
json = jsonlite::toJSON(df_full, 'columns')
return(json)
}
runApp()
head(g11_vis$nodes)
json_1 <- config_json(g11_vis$nodes, g11_vis$edges, dimNames)
dimNames = c(path1_name, path2_name, path3_name)
json_1 <- config_json(g11_vis$nodes, g11_vis$edges, dimNames)
json_2 <- config_json2(g11_vis$nodes, g11_vis$edges, g22_vis$nodes, g22_vis$edges, dimNames)
runApp()
nodes1= g11_vis$nodes
nodes2=g22_vis$nodes
edges1=g11_vis$edges
edges2=g22_vis$edges
df1 = config_df(nodes1, edges1, dimNames)
df2 = config_df(nodes2, edges2, dimNames)
df_full = list(df1, df2)
jsonlite::toJSON(df_full, 'columns')
json_2 <- config_json2(g11_vis$nodes, g11_vis$edges, g22_vis$nodes, g22_vis$edges, dimNames)
json_2
runApp()
head(df1)
head(df2)
df_full = list(df1, df2)
head(df_full)
json = jsonlite::toJSON(df_full, 'columns')
json
shiny::runApp()
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre7')
library(rJava)
installed.packages('rJava')
library(rJava)
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre1.8.0_201')
library(rJava)
Sys.getenv("JAVA_HOME")
if (Sys.getenv("JAVA_HOME")!="")
+     Sys.setenv(JAVA_HOME="")
Sys.getenv("JAVA_HOME")
library(rJava)
Version()
Version
version
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_191')
install.packages('rJava')
library(rJava)
runApp()
runApp()
